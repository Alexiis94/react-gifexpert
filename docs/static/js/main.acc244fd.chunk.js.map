{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAgB5C,OACI,0BAAMC,SATY,SAACC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OACvCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAlBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAGtCa,QAAQC,IAAIR,GAXO,kBAYZA,GAZY,4CAAH,sDCCPS,EAAc,SAAC,GAAuB,IAArBN,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAErC,OADAa,QAAQC,IAAIL,EAAGC,EAAMV,GAEjB,yBAAKgB,UAAU,wBACX,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,2BAAIA,KCHHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAa,IAAD,EACXd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAkBrC,OAbAC,qBAAU,WACN1B,EAAQC,GACH0B,MAAM,SAAAC,GACHH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAMvB,CAACtB,IAEIuB,EDhBuBK,CAAc5B,GAAhCa,EADyB,EAC9BN,KAAYe,EADkB,EAClBA,QAKrB,OAJEP,QAAQC,IAAIM,GAKZ,oCACE,wBAAIJ,UAAU,uDAAuDlB,GAGpEsB,GAAW,uBAAGJ,UAAU,uDAAb,WAEZ,yBAAKA,UAAU,aACZL,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eACEmB,IAAKnB,EAAIC,IACLD,UEjBHoB,EAAe,WAAO,IAAD,EAGM5C,mBAAU,CAAC,cAHjB,mBAGvB6C,EAHuB,KAGX9C,EAHW,KAe9B,OACI,oCACI,4CAEA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAGA,4BAGQ8C,EAAWtB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACA6B,IAAK7B,EACLA,SAAYA,U,MC3BpCgC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.acc244fd.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// Formuario input\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange =(e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    // Realizamos un post del submmit\r\n    const handleSubmmit = (e) =>{\r\n        e.preventDefault();\r\n                  \r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cats => [ inputValue,...cats]);\r\n            setInputValue('');\r\n         }\r\n    }\r\n    return (\r\n        <form onSubmit = {handleSubmmit}>\r\n           \r\n            <input  \r\n                type=\"text\"\r\n                value= {inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=FqVbuonAUy8EuuaAO8179aMwKygBgeUT`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n    console.log(gifs);\r\n    return gifs;\r\n  };","import React from 'react'\r\n// imprimiendo gifs\r\nexport const GifGridItem = ({ id, title, url}) => {\r\n    console.log(id,title,url);\r\n    return (\r\n        <div className=\"card animate__fadeIn\" >\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const {data:images,loading} = useFetchGifs( category);\r\n    console.log(loading);\r\n\r\n\r\n  //getGifs();\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__bounce animate__delay-2s\">{category}</h3>\r\n      {/* Operador Terniario = ? 'Cargand' */}\r\n      {/* es igual a un if */}\r\n      {loading && <p className=\"animate__animated animate__bounce animate__delay-2s\">Loading</p> }\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem \r\n            key={img.id}\r\n            {...img} \r\n            />\r\n        ))\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\"\r\nimport {getGifs} from '../helpers/GetGifs'\r\n// se uso para realizar una carga automatica.\r\nexport const useFetchGifs = (category) =>{\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then( imgs =>{\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n               \r\n\r\n\r\n            })\r\n    },[category])\r\n    \r\n    return state; // {data:[], loadding: true}\r\n    \r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    \r\n    const [categories, setCategories] = useState( ['One Punch']);\r\n\r\n    // const handleAdd =() => {\r\n        // 1. la forma correcta de agregar un valor a mi arreglo es usando el SetCategories\r\n        // 2. Operador Spread [...categorias, 'valorAagregar']\r\n        // setCategories([...categories, 'HunterXHunter']);\r\n        // Si quiero que el valor a agregar se agrege de primero \r\n        //setCategories(['HunterXHunter', ...categories]);\r\n    // }\r\n\r\n\r\n    // \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            {/* le pasamos una propiedad a AddCategory */}\r\n            <AddCategory setCategories = {setCategories}/>\r\n            <hr/>\r\n            \r\n            \r\n            <ol>\r\n            {/* map() usamos para listar el arreglo con el total de mis categorias y retornamos una lista agregandole un key */}\r\n                {\r\n                    categories.map(category =>(\r\n                        <GifGrid \r\n                        key={category}\r\n                        category = {category} \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <GifExpertApp />, \n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}